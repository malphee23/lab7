//Ellipse.cpp

#define GLEW_DLL
#define GLFW_DLL

#include <stdio.h>
#include <GL/glew.h>
#include <GLFW/glfw3.h>
#include <math.h>
#include "shaders.h"
#include "glm.hpp"
#include "glm/gtc/matrix_transform.hpp"
#include "glm/gtc/type_ptr.hpp"
#include "Model.h"

const unsigned int SCR_WIDTH = 1024;
const unsigned int SCR_HEIGHT = 768;

glm::vec3 cameraPos = glm::vec3(0.0f, 0.0f, 3.0f);
glm::vec3 cameraFront = glm::vec3(0.0f, 0.0f, -1.0f);
glm::vec3 cameraUp = glm::vec3(0.0f, 1.0f, 0.0f);

float yaw = -90.0f;
float pitch = 0.0f;
float fov = 45.0f;

float lastX = SCR_WIDTH / 2.0f;
float lastY = SCR_HEIGHT / 2.0f;
bool firstMouse = true;

float deltaTime = 0.0f;
float lastFrame = 0.0f;

glm::mat4 projection;
glm::mat4 view;

glm::mat4 translateOX1 = glm::mat4(1.0);
glm::mat4 translateOX2 = glm::mat4(1.0);
glm::mat4 translateOX3 = glm::mat4(1.0);

float linearOX1 = 0.0;
float linearOX2 = 0.0;
float linearOX3 = 0.0;

void framebuffer_size_callback(GLFWwindow* window, int width, int height) {
    glViewport(0, 0, width, height);
}

void mouse_callback(GLFWwindow* window, double xposIn, double yposIn) {
    float xpos = static_cast<float>(xposIn);
    float ypos = static_cast<float>(yposIn);

    if (firstMouse) {
        lastX = xpos;
        lastY = ypos;
        firstMouse = false;
    }

    float xoffset = xpos - lastX;
    float yoffset = lastY - ypos;
    lastX = xpos;
    lastY = ypos;

    float sensitivity = 0.1f;
    xoffset *= sensitivity;
    yoffset *= sensitivity;

    yaw += xoffset;
    pitch += yoffset;

    if (pitch > 89.0f)
        pitch = 89.0f;
    if (pitch < -89.0f)
        pitch = -89.0f;

    glm::vec3 front;
    front.x = cos(glm::radians(yaw)) * cos(glm::radians(pitch));
    front.y = sin(glm::radians(pitch));
    front.z = sin(glm::radians(yaw)) * cos(glm::radians(pitch));
    cameraFront = glm::normalize(front);
}

void scroll_callback(GLFWwindow* window, double xoffset, double yoffset) {
    fov -= (float)yoffset;
    if (fov < 1.0f)
        fov = 1.0f;
    if (fov > 45.0f)
        fov = 45.0f;
}

void processInput(GLFWwindow* window) {
    float currentFrame = glfwGetTime();
    deltaTime = currentFrame - lastFrame;
    lastFrame = currentFrame;

    float cameraSpeed = 2.5f * deltaTime;
    if (glfwGetKey(window, GLFW_KEY_W) == GLFW_PRESS)
        cameraPos += cameraSpeed * cameraFront;
    if (glfwGetKey(window, GLFW_KEY_S) == GLFW_PRESS)
        cameraPos -= cameraSpeed * cameraFront;
    if (glfwGetKey(window, GLFW_KEY_A) == GLFW_PRESS)
        cameraPos -= glm::normalize(glm::cross(cameraFront, cameraUp)) * cameraSpeed;
    if (glfwGetKey(window, GLFW_KEY_D) == GLFW_PRESS)
        cameraPos += glm::normalize(glm::cross(cameraFront, cameraUp)) * cameraSpeed;

    if (glfwGetKey(window, GLFW_KEY_N) == GLFW_PRESS) {
        float newLinear = linearOX1 - deltaTime;
        translateOX1 = glm::translate(glm::mat4(1.0), glm::vec3(0, 0, newLinear));
        linearOX1 = newLinear;
    }
    if (glfwGetKey(window, GLFW_KEY_M) == GLFW_PRESS) {
        float newLinear = linearOX1 + deltaTime;
        translateOX1 = glm::translate(glm::mat4(1.0), glm::vec3(0, 0, newLinear));
        linearOX1 = newLinear;
    }

    if (glfwGetKey(window, GLFW_KEY_J) == GLFW_PRESS) {
        float newLinear = linearOX2 - deltaTime;
        translateOX2 = glm::translate(glm::mat4(1.0), glm::vec3(newLinear, 0, 0));
        linearOX2 = newLinear;
    }
    if (glfwGetKey(window, GLFW_KEY_K) == GLFW_PRESS) {
        float newLinear = linearOX2 + deltaTime;
        translateOX2 = glm::translate(glm::mat4(1.0), glm::vec3(newLinear, 0, 0));
        linearOX2 = newLinear;
    }

    if (glfwGetKey(window, GLFW_KEY_O) == GLFW_PRESS) {
        float newLinear = linearOX3 - deltaTime;
        translateOX3 = glm::translate(glm::mat4(1.0), glm::vec3(0, newLinear, 0));
        linearOX3 = newLinear;
    }
    if (glfwGetKey(window, GLFW_KEY_P) == GLFW_PRESS) {
        float newLinear = linearOX3 + deltaTime;
        translateOX3 = glm::translate(glm::mat4(1.0), glm::vec3(0, newLinear, 0));
        linearOX3 = newLinear;
    }
}

int main() {
    if (!glfwInit()) {
        fprintf(stderr, "ERROR: glfwInit failed\n");
        return -1;
    }

    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 4);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 6);
    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

    GLFWwindow* window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, "Model Viewer", NULL, NULL);
    if (!window) {
        glfwTerminate();
        return -1;
    }

    glfwMakeContextCurrent(window);

    glewExperimental = GL_TRUE;
    GLenum ret = glewInit();
    if (GLEW_OK != ret) {
        fprintf(stderr, "ERROR: %s\n", glewGetErrorString(ret));
        return 1;
    }

    Shader shader("vertex_shader.glsl", "fragment_shader.glsl");
    shader.use();

    Model model("Model/model.obj");

    glm::vec3 lightPos(1.0f, 1.0f, 1.0f);

    glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);
    glfwSetCursorPosCallback(window, mouse_callback);
    glfwSetScrollCallback(window, scroll_callback);
    glfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_DISABLED);

    glEnable(GL_DEPTH_TEST);

    while (!glfwWindowShouldClose(window)) {
        processInput(window);

        glClearColor(0.2f, 0.3f, 0.3f, 1.0f);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

        projection = glm::perspective(glm::radians(fov), (float)SCR_WIDTH / (float)SCR_HEIGHT, 0.1f, 100.0f);
        view = glm::lookAt(cameraPos, cameraPos + cameraFront, cameraUp);

        glm::mat4 modelMatrix = glm::mat4(1.0f);

        shader.setUniform("ourColor", 0.3f, 0.7f, 0.9f, 1.0f);
        shader.setUniformMat("view", view);
        shader.setUniformMat("projection", projection);
        shader.setUniformMat("model", modelMatrix);

        glm::vec3 lightColor = glm::vec3(1.0, 1.0, 1.0);
        shader.setVec3("lightColor", lightColor);

        glm::vec3 lightAmbient = lightColor * glm::vec3(0.2);
        glm::vec3 lightDiffuse = lightColor * glm::vec3(0.8);
        glm::vec3 lightSpecular = lightColor;

        shader.setVec3("light_1.ambient", lightAmbient);
        shader.setVec3("light_1.diffuse", lightDiffuse);
        shader.setVec3("light_1.specular", lightSpecular);
        shader.setVec3("light_1.position", lightPos);

        glm::vec3 matAmbient = glm::vec3(0.247, 0.199, 0.074);
        glm::vec3 matDiffuse = glm::vec3(0.751, 0.606, 0.226);
        glm::vec3 matSpecular = glm::vec3(0.628, 0.555, 0.366);
        float matShininess = 51.2f;

        shader.setVec3("mat_1.ambient", matAmbient);
        shader.setVec3("mat_1.diffuse", matDiffuse);
        shader.setVec3("mat_1.specular", matSpecular);
        shader.setFloat("mat_1.shininess", matShininess);

        glm::mat3 normalMatrix = glm::transpose(glm::inverse(glm::mat3(modelMatrix)));
        shader.setMat3("normalMatrix", normalMatrix);
        shader.setVec3("viewPos", cameraPos);

        model.Draw(shader, translateOX1, translateOX2, translateOX3);

        glfwSwapBuffers(window);
        glfwPollEvents();
    }

    glfwDestroyWindow(window);
    glfwTerminate();
    return 0;
}

//fragment_shader:
#version 410 core
out vec4 fragColor;

in vec3 Normal;
in vec3 FragPos;

uniform vec3 viewPos;

struct lightStruct {
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

struct materialStruct {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
};

uniform lightStruct light_1;
uniform materialStruct mat_1;

void main() {
    // ambient
    vec3 ambient = light_1.ambient * mat_1.ambient;

    // diffuse
    vec3 norm = normalize(Normal);
    vec3 lightDirection = normalize(light_1.position - FragPos);
    float diff = max(dot(norm, lightDirection), 0.0);
    vec3 diffuse = light_1.diffuse * (diff * mat_1.diffuse);

    // specular
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDirection, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), mat_1.shininess);
    vec3 specular = light_1.specular * (spec * mat_1.specular);

    vec3 result = ambient + diffuse + specular;
    fragColor = vec4(result, 1.0);
}

//vertex_shader:
#version 410 core
layout (location = 0) in vec3 vp;
layout (location = 1) in vec3 normal;

out vec3 Normal;
out vec3 FragPos;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform mat3 normalMatrix;

void main() {
    Normal = normalize(normalMatrix * normal);
    FragPos = vec3(model * vec4(vp, 1.0));
    gl_Position = projection * view * model * vec4(vp, 1.0);
}

//shaders.h:
#ifndef SHADER_H
#define SHADER_H

#include <GL/glew.h>
#include <string>
#include <fstream>
#include <sstream>
#include <iostream>
#include "glm.hpp"
#include "glm/gtc/type_ptr.hpp"

class Shader {
public:
    GLuint ID;

    Shader(const char* vertexPath, const char* fragmentPath) {
        std::string vertexCode, fragmentCode;
        std::ifstream vShaderFile, fShaderFile;

        vShaderFile.open(vertexPath);
        fShaderFile.open(fragmentPath);
        std::stringstream vShaderStream, fShaderStream;

        vShaderStream << vShaderFile.rdbuf();
        fShaderStream << fShaderFile.rdbuf();

        vShaderFile.close();
        fShaderFile.close();

        vertexCode = vShaderStream.str();
        fragmentCode = fShaderStream.str();

        const char* vShaderCode = vertexCode.c_str();
        const char* fShaderCode = fragmentCode.c_str();

        GLuint vertex, fragment;
        vertex = glCreateShader(GL_VERTEX_SHADER);
        glShaderSource(vertex, 1, &vShaderCode, NULL);
        glCompileShader(vertex);

        fragment = glCreateShader(GL_FRAGMENT_SHADER);
        glShaderSource(fragment, 1, &fShaderCode, NULL);
        glCompileShader(fragment);

        ID = glCreateProgram();
        glAttachShader(ID, vertex);
        glAttachShader(ID, fragment);
        glLinkProgram(ID);

        glDeleteShader(vertex);
        glDeleteShader(fragment);
    }

    void use() {
        glUseProgram(ID);
    }

    void setUniform(const std::string& name, float v1, float v2, float v3, float v4) {
        glUniform4f(glGetUniformLocation(ID, name.c_str()), v1, v2, v3, v4);
    }

    void setUniformMat(const std::string& name, const glm::mat4& mat) {
        glUniformMatrix4fv(glGetUniformLocation(ID, name.c_str()), 1, GL_FALSE, glm::value_ptr(mat));
    }

    void setMat3(const std::string& name, const glm::mat3& mat) {
        glUniformMatrix3fv(glGetUniformLocation(ID, name.c_str()), 1, GL_FALSE, &mat[0][0]);
    }

    void setMat4(const std::string& name, const glm::mat4& mat) {
        glUniformMatrix4fv(glGetUniformLocation(ID, name.c_str()), 1, GL_FALSE, glm::value_ptr(mat));
    }

    void setVec3(const std::string& name, const glm::vec3& value) const {
        glUniform3fv(glGetUniformLocation(ID, name.c_str()), 1, &value[0]);
    }

    void setVec4(const std::string& name, const glm::vec4& value) const {
        glUniform4fv(glGetUniformLocation(ID, name.c_str()), 1, &value[0]);
    }

    void setFloat(const std::string& name, float value) const {
        glUniform1f(glGetUniformLocation(ID, name.c_str()), value);
    }
};

#endif
//Mesh.h:
#define GLEW_DLL
#define GLFW_DLL

#ifndef MESH_H
#define MESH_H

#include <GL/glew.h>
#include <GLFW/glfw3.h>
#include "glm/glm.hpp"
#include "glm/gtc/matrix_transform.hpp"

#include <vector>

using namespace std;

struct Vertex {
    // position
    glm::vec3 Position;
    // normal
    glm::vec3 Normal;      
};

class Mesh {
public:
    vector <Vertex>       vertices;
    vector <unsigned int> indices;
    unsigned int VAO;

    Mesh(vector<Vertex> vertices, vector<unsigned int> indices) {
        this->vertices = vertices;
        this->indices = indices;

        setupMesh();
    }

    void Draw() {
        glBindVertexArray(VAO);
        glDrawElements(GL_TRIANGLES, static_cast<unsigned int>(indices.size()), GL_UNSIGNED_INT, 0);
        glBindVertexArray(0);
        
    }

private:
    unsigned int VBO, EBO;

    void setupMesh() {
        glGenVertexArrays(1, &VAO);
        glGenBuffers(1, &VBO);
        glGenBuffers(1, &EBO);

        glBindVertexArray(VAO);

        glBindBuffer(GL_ARRAY_BUFFER, VBO);
        glBufferData(GL_ARRAY_BUFFER, vertices.size() * sizeof(Vertex), &vertices[0], GL_STATIC_DRAW);

        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
        glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices.size() * sizeof(unsigned int), &indices[0], GL_STATIC_DRAW);

        glEnableVertexAttribArray(0);
        glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, sizeof(Vertex), (void*)0);

        glEnableVertexAttribArray(1);
        glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, sizeof(Vertex), (void*)offsetof(Vertex, Normal));

        glBindVertexArray(0);
    }
};
#endif
//Model.h:
#ifndef MODEL_H
#define MODEL_H


#include <GL\GL.h>
#include "GLFW/glfw3.h"

#include "glm.hpp"
#include "glm/gtc/matrix_transform.hpp"
#include <assimp/Importer.hpp>
#include <assimp/scene.h>
#include <assimp/postprocess.h>

#include "Mesh.h"

#include <string>
#include <fstream>
#include <sstream>
#include <iostream>
#include <vector>
using namespace std;

class Model
{
public:
    
    vector<Mesh> meshes;
    string directory;
        
    Model(string const& path) {
        loadModel(path);
    }
     
    void Draw(Shader& shader) {
        for (unsigned int i = 0; i < meshes.size(); i++) {
            meshes[i].Draw();
        }
    }

    void Draw(Shader& shader, glm::mat4 transformOX1, glm::mat4 transformOX2, glm::mat4 transformOX3) {
        for (unsigned int i = 0; i < meshes.size(); i++) {
            switch (i) {
            case 2:
                shader.setMat4("model", transformOX1);
                break;

            case 3:
                shader.setMat4("model", transformOX2);
                break;
            
            case 4:
                shader.setMat4("model", transformOX3);
                break;

            default:
                shader.setMat4("model", glm::mat4(1.0));
            }
            meshes[i].Draw();
        }
    }

private:
    
    void loadModel(string const& path) {
        Assimp::Importer importer;

        const aiScene* scene = importer.ReadFile(path,
            aiProcess_CalcTangentSpace |
            aiProcess_Triangulate |
            aiProcess_JoinIdenticalVertices |
            aiProcess_SortByPType);

        if (nullptr == scene) {
            cout << "ASSIMP ERROR: " << importer.GetErrorString() << endl;
        }

        processNode(scene->mRootNode, scene);
    }
        
    void processNode(aiNode* node, const aiScene* scene) {
        for (unsigned int i = 0; i < node->mNumMeshes; i++) {
            aiMesh* mesh = scene->mMeshes[node->mMeshes[i]];
            meshes.push_back(processMesh(mesh, scene));
        }

        for (unsigned int i = 0; i < node->mNumChildren; i++) {
            processNode(node->mChildren[i], scene);
        }
        
    }

    Mesh processMesh(aiMesh* mesh, const aiScene* scene) {
        vector<Vertex> vertices;
        vector<unsigned int> indices;

        for (unsigned int i = 0; i < mesh->mNumVertices; i++) {
            Vertex vertex;
            glm::vec3 vector;

            vector.x = mesh->mVertices[i].x;
            vector.y = mesh->mVertices[i].y;
            vector.z = mesh->mVertices[i].z;
            vertex.Position = vector;

            if (mesh->HasNormals()) {
                vector.x = mesh->mNormals[i].x;
                vector.y = mesh->mNormals[i].y;
                vector.z = mesh->mNormals[i].z;
                vertex.Normal = vector;
            }
            else {
                vertex.Normal = glm::vec3(0.0f);
            }

            vertices.push_back(vertex);
        }

        for (unsigned int i = 0; i < mesh->mNumFaces; i++) {
            aiFace face = mesh->mFaces[i];
            for (unsigned int j = 0; j < face.mNumIndices; j++) {
                indices.push_back(face.mIndices[j]);
            }
        }

        return Mesh(vertices, indices);
    }
};

#endif


